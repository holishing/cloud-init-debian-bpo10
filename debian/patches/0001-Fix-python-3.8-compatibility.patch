From: Noah Meyerhans <noahm@debian.org>
Date: Thu, 19 Mar 2020 15:13:27 -0700
Subject: [PATCH] Fix python 3.8 compatibility
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=954276
Forwarded: https://bugs.launchpad.net/cloud-init/+bug/1868327

---
 cloudinit/config/cc_disk_setup.py   |  2 +-
 cloudinit/config/tests/test_disk.py | 32 +++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+), 1 deletion(-)
 create mode 100644 cloudinit/config/tests/test_disk.py

diff --git a/cloudinit/config/cc_disk_setup.py b/cloudinit/config/cc_disk_setup.py
index 0796cb7b..45925755 100644
--- a/cloudinit/config/cc_disk_setup.py
+++ b/cloudinit/config/cc_disk_setup.py
@@ -163,7 +163,7 @@ def handle(_name, cfg, cloud, log, _args):
 def update_disk_setup_devices(disk_setup, tformer):
     # update 'disk_setup' dictionary anywhere were a device may occur
     # update it with the response from 'tformer'
-    for origname in disk_setup.keys():
+    for origname in list(disk_setup):
         transformed = tformer(origname)
         if transformed is None or transformed == origname:
             continue
diff --git a/cloudinit/config/tests/test_disk.py b/cloudinit/config/tests/test_disk.py
new file mode 100644
index 00000000..8178cd08
--- /dev/null
+++ b/cloudinit/config/tests/test_disk.py
@@ -0,0 +1,32 @@
+from unittest.mock import MagicMock
+
+import cloudinit.config.cc_disk_setup as disk
+import cloudinit.tests.test_util as util
+from cloudinit.tests.helpers import CiTestCase, mock
+
+class TestDiskSetup(CiTestCase):
+
+    def test_device_name_xform(self):
+        devicename = 'foo'
+        devicename_xform = "modified-{}".format(devicename)
+        data = {devicename: {'table_type': 'gpt', 'overwrite': False}}
+        cloud = util.FakeCloud(hostname="dummy", fqdn="dummy.example.com")
+        cloud.device_name_to_device = MagicMock(return_value=devicename_xform)
+        disk.update_disk_setup_devices(data, cloud.device_name_to_device)
+        try:
+            self.assertIsNotNone(data[devicename_xform])
+        except KeyError as e:
+            self.fail("Expected drive_data to contain {}")
+
+        self.assertEqual(1, len(data))
+        self.assertRaises(KeyError, lambda: data[devicename])
+        
+    def test_device_name_nochange(self):
+        devicename = 'foo'
+        data = {devicename: {'table_type': 'gpt', 'overwrite': False}}
+        cloud = util.FakeCloud(hostname="dummy", fqdn="dummy.example.com")
+        cloud.device_name_to_device = MagicMock(return_value=devicename)
+        disk.update_disk_setup_devices(data, cloud.device_name_to_device)
+        self.assertIsNotNone(data[devicename])
+        self.assertEqual(1, len(data))
+
-- 
2.17.1

